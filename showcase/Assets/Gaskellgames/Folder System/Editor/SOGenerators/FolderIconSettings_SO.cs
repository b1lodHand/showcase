#if UNITY_EDITOR
using System.Collections.Generic;
using UnityEngine;

namespace Gaskellgames.FolderSystem.EditorOnly
{
    /// <summary>
    /// Code created by Gaskellgames
    /// </summary>

    [CreateAssetMenu(fileName = "FolderIconSettings", menuName = "Gaskellgames/Folder System/FolderIconSettings")]
    public class FolderIconSettings_SO : GGScriptableObject
    {
        #region Variables

        [SerializeField, ReadOnly]
        internal bool useCustomDictionary = false;
        
        [SerializeField, ReadOnly]
        internal bool showIcons = true;
        
        [SerializeField, ReadOnly]
        internal List<ProjectFolderIconLinks> userGeneratedLinks = new List<ProjectFolderIconLinks>();
        
        internal Dictionary<string, Texture> folderIconDictionary;
        private Dictionary<string, Texture> userGeneratedIconDictionary;
        
        #endregion
        
        //----------------------------------------------------------------------------------------------------

        #region Internal Functions

        internal void TryInitialiseUserGeneratedLinks()
        {
            if (userGeneratedLinks == null || userGeneratedLinks.Count <= 0)
            {
                userGeneratedLinks = new List<ProjectFolderIconLinks>();
            }
        }

        internal void TryAddToUserGeneratedLinks(ProjectFolderIconLinks newLink)
        {
            bool canAdd = true;
            foreach (ProjectFolderIconLinks link in userGeneratedLinks)
            {
                if (link.name == newLink.name) { canAdd = false; }
            }
            if (canAdd) { userGeneratedLinks.Add(newLink); }
        }
        
        internal void SetShowIcons(bool value)
        {
            showIcons = value;
        }

        internal void SetUseCustomDictionary(bool value)
        {
            if (value == useCustomDictionary) { return; }
            
            useCustomDictionary = value;
            CreateFolderIconDictionary();
        }
        
        internal void CreateFolderIconDictionary()
        {
            // initialise and/or reset dictionary before applying selection
            folderIconDictionary = new Dictionary<string, Texture>();
            if (useCustomDictionary)
            {
                Log("User generated folder icon links selected.");
                userGeneratedIconDictionary = new Dictionary<string, Texture>();
                foreach (ProjectFolderIconLinks projectFolderIconLink in userGeneratedLinks)
                {
                    // add texture name
                    userGeneratedIconDictionary.TryAdd(projectFolderIconLink.name, projectFolderIconLink.texture);
                    
                    // add additional links
                    foreach (string additionalLink in projectFolderIconLink.additionalLinks)
                    {
                        userGeneratedIconDictionary.TryAdd(additionalLink, projectFolderIconLink.texture);
                    }
                }
                folderIconDictionary = userGeneratedIconDictionary;
            }
            else
            {
                Log("Auto generated folder icon links selected.");
                ProjectFolderIconAssetPostprocessor.AutoGenerateIconDictionary();
                folderIconDictionary = ProjectFolderIconAssetPostprocessor.autoGeneratedIconDictionary;
            }
        }

        #endregion
        
    } // class end
}
#endif